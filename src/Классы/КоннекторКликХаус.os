Перем _Логин;
Перем _Пароль;
Перем _Хост;
Перем _Порт;

Процедура ПриСозданииОбъекта(Хост, Порт, Логин, Пароль)
	_Хост = Хост;
	_Порт = Порт;
	_Логин = Логин;
	_Пароль	= Пароль;
КонецПроцедуры

#Область Вспомогательное

Функция ШаблонРезультатОбращенияВКХ()

	Результат = Новый Структура("Ответ, Ошибка, КодОтвета");
	
	Возврат Результат;
КонецФункции // ШаблонРезультатОбращенияВКХ()

Функция ПараметрыПодключения() Экспорт 

	Результат = Новый Структура("Хост, Порт, Логин, Пароль", _Хост, _Порт, _Логин, _Пароль);
		
	Возврат Результат;
	
КонецФункции

Функция ВыбратьВТаблицуЗначенийПроизвольныйЗапрос(ТекстЗапроса, Колонки = Неопределено) Экспорт

	Результат = ВыполнитьЗапросВКликХаус(ТекстЗапроса);

	Если Результат.Ошибка = Истина Тогда
		ВызватьИсключение Результат.Ответ;
	Иначе
		ТЗ = ПолучитьТаблицуИзРезультат(Результат.Ответ);
		
		Если ЗначениеЗаполнено(Колонки) и ТЗ.Колонки.Количество() > 0 Тогда
			ПереименоватьКолонки(ТЗ, Колонки);
		КонецЕсли;

		Возврат ТЗ;
	КонецЕсли
	
КонецФункции

Функция ВыполнитьЗапросВКликХаус(ТекстЗапроса) Экспорт
	
	Результат = ШаблонРезультатОбращенияВКХ();

	ПараметрыПодключения = ПараметрыПодключения();
	
	Попытка	
		
		Запрос 	   = Новый HTTPЗапрос();
				
		Если ЗначениеЗаполнено(ПараметрыПодключения.Логин) Тогда
			Соединение = Новый HttpСоединение(ПараметрыПодключения.Хост, 
												ПараметрыПодключения.Порт,
												ПараметрыПодключения.Логин,
												ПараметрыПодключения.Пароль,,30);
		Иначе
			Соединение = Новый HttpСоединение(ПараметрыПодключения.Хост, ПараметрыПодключения.Порт,,,,30);	
		КонецЕсли;
		
		Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
		
		Ответ 		= Соединение.ОтправитьДляОбработки(Запрос);
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Результат.КодОтвета = Ответ.КодСостояния; 
		Результат.Ответ 	= ТекстОтвета;		
		Результат.Ошибка 	= не Ответ.КодСостояния = 200;
		
	Исключение
		Результат.Ответ	 = ОписаниеОшибки();		
		Результат.Ошибка = Истина;		 
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураВСтроку(СтруктураКолонок, Разделитеть = ", ", ШаблонСтроки = "%1 %2")

	МассивСтрок = Новый Массив;
	
	Для каждого КиЗ Из СтруктураКолонок Цикл
	
		МассивСтрок.Добавить(СтрШаблон(ШаблонСтроки, КиЗ.Ключ, КиЗ.Значение)); 
	
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Разделитеть);

КонецФункции // СтруктураВСтроку()

Функция МассивСтруктурВТЗ(МассивСтруктур) Экспорт 

	ТЗ = Новый ТаблицаЗначений;
	
	Для Каждого ТекСтруктура из МассивСтруктур Цикл 
		НоваяСтрока = ТЗ.Добавить();
		для Каждого КиЗ из ТекСтруктура цикл			
			Если ТЗ.Колонки.Найти(КиЗ.Ключ) = Неопределено Тогда
				ТЗ.Колонки.Добавить(КиЗ.Ключ);	
			КонецЕсли;			
			НоваяСтрока[КиЗ.Ключ] = КиЗ.Значение;			
		КонецЦикла;		
	КонецЦикла;

	Возврат ТЗ;
	
КонецФункции // МассивСтруктурВТЗ()

Функция КолонкиКакСтруктура(Колонки) 

	Структура = Новый Структура;

	Для Каждого ТекКолонка из Колонки Цикл
		Структура.Вставить(ТекКолонка.Имя);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции // КолонкиКакСтруктура()

Функция ПривестиКТипамКХ(ТаблицаЗначений, ОписаниеТиповКолонок) Экспорт 
	// В таблице значений колонки могут быть типизированные, 
	// это может сломать выгрузку, например 1 превратит в "Да".
	// Поэтому пересоберем ТЗ
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	Для Каждого КиЗ Из ОписаниеТиповКолонок Цикл
		ТаблицаРезультат.Колонки.Добавить(КиЗ.Ключ);
	КонецЦикла;
	
	Для каждого ТекСтрока Из ТаблицаЗначений Цикл
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		
		Для Каждого КиЗ Из ОписаниеТиповКолонок Цикл
			НоваяСтрока[КиЗ.Ключ] = ПреобразоватьВТипКХ(ТекСтрока[КиЗ.Ключ], КиЗ.Значение);
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат ТаблицаРезультат;

КонецФункции // ЭкранироватьТаблицуЗначений()

Функция ПреобразоватьВТипКХ(Знач Значение, Тип) Экспорт 
	
	ТипыКХ = ТипыВКХ();
	
	Если ТипыКХ.Булево = Тип Тогда
		
		Возврат ?(Значение = Истина, 1, 0);	
		
	ИначеЕсли ТипыКХ.Число = Тип Тогда
		
		Возврат формат(Значение, "ЧРД=.; ЧГ=0");
		
	ИначеЕсли ТипыКХ.ЧислоДробное = Тип Тогда
		
		Возврат формат(Значение, "ЧРД=.; ЧГ=0");
		
	ИначеЕсли ТипыКХ.Дата = Тип Тогда
		
		Возврат СтрШаблон("'%1'", Формат(Значение, "ДФ='гггг-ММ-дд ЧЧ:мм:сс'"));	
		
	Иначе //Все остальное как строка
		Возврат СтрШаблон("'%1'", Строка(Значение));
		
	КонецЕсли;
	

КонецФункции // ПреобразоватьВТипКХ()

Функция ТипыВКХ() Экспорт 

	Результат = Новый Структура();	
	
	Результат.Вставить("Строка", "String");
	Результат.Вставить("Булево", "BOOL");
	Результат.Вставить("Дата", "DateTime");
	Результат.Вставить("Число", "Int32");
	Результат.Вставить("ЧислоДробное", "FLOAT");
		
	Возврат Результат;

КонецФункции // СоответствиеТипов()

Функция ПолучитьТипПоОписаниюТипов(ОписаниеТипов) Экспорт 
	
	МассивТипов = ОписаниеТипов.Типы();
	
	Для Каждого ТекТип из МассивТипов Цикл 
		
		Если ТекТип = Тип("Строка") Тогда			
			Возврат ТипыВКХ().Строка;
			
		ИначеЕсли ТекТип = Тип("Число") Тогда			
			Возврат ТипыВКХ().ЧислоДробное;
			
		ИначеЕсли ТекТип = Тип("Дата") Тогда			
			Возврат ТипыВКХ().Дата;
			
		ИначеЕсли ТекТип = Тип("Булево") Тогда			
			Возврат ТипыВКХ().Булево;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТипыВКХ().Строка;

КонецФункции // ПолучитьТипПоОписаниюТипов()

Функция ПолучитьОписаниеКолонок(КолонкиТЗ) Экспорт
	Результат = Новый Структура;
	Для каждого ТекКолонка Из КолонкиТЗ Цикл	
		Результат.Вставить(ТекКолонка.Имя, ПолучитьТипПоОписаниюТипов(ТекКолонка.ТипЗначения));	
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область РаботаСТаблицами
	
Функция СоздатьТаблицу(ИмяТаблицы, ОписаниеКолонок) Экспорт 
     
	ТекстЗапроса = СтрШаблон(ШаблонСозданияТаблицы(),ИмяТаблицы, СтруктураВСтроку(ОписаниеКолонок));	               

	Возврат ВыполнитьЗапросВКликХаус(ТекстЗапроса);
	
КонецФункции // СоздатьТаблицу()

Функция УдалитьТаблицу(ИмяТаблицы) Экспорт 

	ТекстЗапроса = СтрШаблон(ШаблонУдаленияТаблицы(), ИмяТаблицы);
	
	Возврат ВыполнитьЗапросВКликХаус(ТекстЗапроса);

КонецФункции // УдалитьТаблицу()
	
Функция ОчиститьТаблицу(ИмяТаблицы) Экспорт 

	ТекстЗапроса = СтрШаблон(ШаблонОчисткиТаблицы(), ИмяТаблицы);
	
	Возврат ВыполнитьЗапросВКликХаус(ТекстЗапроса);

КонецФункции

#КонецОбласти

#Область РаботаСДанными

Функция ВставитьВТаблицу(ИмяТаблицы, Данные) Экспорт 

	Если ТипЗнч(Данные) = Тип("Массив") Тогда 
		Данные = МассивСтруктурВТЗ(Данные);
	КонецЕсли;
	
	Колонки = КолонкиКакСтруктура(Данные.Колонки);
	
	ШапкаЗапроса = СтрШаблон(ШаблонВставкиДанных_Шапка(),
							ИмяТаблицы,
							СтруктураВСтроку(Колонки, ,"%1")
							);
							
	МассивКОтправке = Новый Массив;
	
	Для каждого ТекСтрока Из Данные Цикл
		
		ЗаполнитьЗначенияСвойств(Колонки, ТекСтрока);
		МассивКОтправке.Добавить(СтрШаблон("(%1)", СтруктураВСтроку(Колонки, ,"%2")));		
	
	КонецЦикла;
	
	ТекстЗапроса = ШапкаЗапроса +Символы.ПС+ СтрСоединить(МассивКОтправке, Символы.ПС);
	
	Возврат ВыполнитьЗапросВКликХаус(ТекстЗапроса);	
	
КонецФункции // ВставитьВТаблицу()

Функция ВыбратьИзТаблицы(ИмяТаблицы, Колонки = Неопределено, Отбор = "") Экспорт 

	ВыбранныеКолонки = ?(Колонки = Неопределено, "*", Колонки);
	
	ШапкаЗапроса = СтрШаблон(ШаблонВыбораДанных_Шапка(), ВыбранныеКолонки, ИмяТаблицы);
	
	
	ТекстЗапроса = ШапкаЗапроса + ?(ЗначениеЗаполнено(Отбор), " WHERE " + Отбор, "");
	
	Возврат ВыполнитьЗапросВКликХаус(ТекстЗапроса);

КонецФункции // ВыбратьИзТаблицы()

Функция ВыбратьВТаблицуЗначений(ИмяТаблицы, Колонки = Неопределено, Отбор = "") Экспорт

	Результат = ВыбратьИзТаблицы(ИмяТаблицы, Колонки, Отбор);

	Если Результат.Ошибка = Истина Тогда
		ВызватьИсключение Результат.Ответ;
	Иначе
		ТЗ = ПолучитьТаблицуИзРезультат(Результат.Ответ);
		
		Если ЗначениеЗаполнено(Колонки) и ТЗ.Колонки.Количество() > 0 Тогда
			ПереименоватьКолонки(ТЗ, Колонки);
		КонецЕсли;

		Возврат ТЗ;
	КонецЕсли
	
КонецФункции

Функция ПолучитьИменованнуюТаблицуИзРезультат(ТекстОтвета, ИменаКолонок) Экспорт

	ТЗ = ПолучитьТаблицуИзРезультат(ТекстОтвета);
	ПереименоватьКолонки(ТЗ, ИменаКолонок);

	Возврат ТЗ;
	
КонецФункции

Процедура ПереименоватьКолонки(ТЗ, ИменаКолонок) Экспорт
	Сч = 0;
	Для Каждого ТекИмя из СтрРазделить(ИменаКолонок, ",") Цикл
		ТЗ.Колонки[сч].Имя = СокрЛП(ТекИмя);
		Сч = Сч + 1;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьТаблицуИзРезультат(ТекстОтвета) Экспорт

	ТЗ = Новый ТаблицаЗначений();

	Строки = СтрРазделить(ТекстОтвета, Символы.ПС, Ложь);

	Для Каждого ТекущаяСтрока Из Строки Цикл

		Значения = СтрРазделить(ТекущаяСтрока, Символы.Таб);

		Если ТЗ.Колонки.Количество() = 0 Тогда
			СоздатьКолонкиВТЗ(ТЗ, Значения.Количество());
		КонецЕсли;

		НоваяСтрока = ТЗ.Добавить();

		Для Сч = 0 по Значения.ВГраница() Цикл
			НоваяСтрока[Сч] = Значения[Сч];
		КонецЦикла;

	КонецЦикла;

	Возврат ТЗ;
	
КонецФункции

Процедура СоздатьКолонкиВТЗ(ТЗ, КоличествоКолонок)

	Для Сч = 1 по КоличествоКолонок Цикл
		ТЗ.Колонки.Добавить(СтрШаблон("Колонка%1", Сч));
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#Область ШаблоныЗапросов

Функция ШаблонВыбораДанных_Шапка()

	Возврат "SELECT %1 FROM %2";

КонецФункции // ШаблонВыбора_Шапка()

Функция ШаблонВставкиДанных_Шапка()

	Возврат "INSERT INTO %1 (%2) VALUES ";

КонецФункции // ШаблонВставкиДанных()

Функция ШаблонСозданияТаблицы()

	Возврат "CREATE TABLE IF NOT EXISTS %1
			|(
			|	%2
			|)
			|ENGINE = Log";

КонецФункции // ШаблонСозданияТаблицы()

Функция ШаблонУдаленияТаблицы()

	Возврат "DROP TABLE IF EXISTS %1";

КонецФункции // ШаблонУдаленияТаблицы()
	
Функция ШаблонОчисткиТаблицы()
	Возврат "TRUNCATE TABLE %1";
КонецФункции

#КонецОбласти

#Область ПользовательскийИнтерфейс

Функция ОтправитьТаблицуЗначенийВКХ(ИмяТаблицы, ТаблицаЗначений) Экспорт 
	
	КолонкиТаблицы = ПолучитьОписаниеКолонок(ТаблицаЗначений.Колонки);
	
	Результат = СоздатьТаблицу(ИмяТаблицы, КолонкиТаблицы);
	
	Если Результат.Ошибка = Истина Тогда
		ВызватьИсключение "Создание таблицы в " + Результат.Ответ;
	КонецЕсли;
	
	ТЗКХ = ПривестиКТипамКХ(ТаблицаЗначений, КолонкиТаблицы);
	
	Результат = ВставитьВТаблицу(ИмяТаблицы, ТЗКХ);
	
	Если Результат.Ошибка = Истина Тогда
		ВызватьИсключение "Отправка данных в " + Результат.Ответ;
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции

#КонецОбласти


